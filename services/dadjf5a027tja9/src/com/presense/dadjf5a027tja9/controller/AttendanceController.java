/*Copyright (c) 2015-2016 presense@presense.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with presense@presense.com*/

package com.presense.dadjf5a027tja9.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.presense.dadjf5a027tja9.service.AttendanceService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;
import com.presense.dadjf5a027tja9.*;
import com.presense.dadjf5a027tja9.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Attendance.
 * @see com.presense.dadjf5a027tja9.Attendance
 */
@RestController(value = "Dadjf5a027tja9.AttendanceController")
@RequestMapping("/dadjf5a027tja9/Attendance")
@Api(description = "Exposes APIs to work with Attendance resource.", value = "AttendanceController")
public class AttendanceController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AttendanceController.class);

    @Autowired
    @Qualifier("dadjf5a027tja9.AttendanceService")
    private AttendanceService attendanceService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Attendance instances matching the search criteria.")
    public Page<Attendance> findAttendances(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Attendances list");
        return attendanceService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Attendance instances.")
    public Page<Attendance> getAttendances(Pageable pageable) {
        LOGGER.debug("Rendering Attendances list");
        return attendanceService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Attendance instance associated with the given id.")
    public Attendance getAttendance(@PathVariable("id") long id) throws EntityNotFoundException {
        LOGGER.debug("Getting Attendance with id: {}", id);
        Attendance instance = attendanceService.findById(id);
        LOGGER.debug("Attendance details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Attendance instance associated with the given id.")
    public boolean deleteAttendance(@PathVariable("id") long id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Attendance with id: {}", id);
        Attendance deleted = attendanceService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Attendance instance associated with the given id.")
    public Attendance editAttendance(@PathVariable("id") long id, @RequestBody Attendance instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Attendance with id: {}", instance.getAttendanceId());
        instance.setAttendanceId(id);
        instance = attendanceService.update(instance);
        LOGGER.debug("Attendance details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @ApiOperation(value = "Creates a new Attendance instance.")
    public Attendance createAttendance(@RequestBody Attendance instance) {
        LOGGER.debug("Create Attendance with information: {}", instance);
        instance = attendanceService.create(instance);
        LOGGER.debug("Created Attendance with information: {}", instance);
        return instance;
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setAttendanceService(AttendanceService service) {
        this.attendanceService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Attendance instances.")
    public Long countAllAttendances() {
        LOGGER.debug("counting Attendances");
        Long count = attendanceService.countAll();
        return count;
    }
}
