/*Copyright (c) 2015-2016 presense@presense.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with presense@presense.com*/

package com.presense.dadjf5a027tja9.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.presense.dadjf5a027tja9.service.BeaconService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;
import com.presense.dadjf5a027tja9.*;
import com.presense.dadjf5a027tja9.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Beacon.
 * @see com.presense.dadjf5a027tja9.Beacon
 */
@RestController(value = "Dadjf5a027tja9.BeaconController")
@RequestMapping("/dadjf5a027tja9/Beacon")
@Api(description = "Exposes APIs to work with Beacon resource.", value = "BeaconController")
public class BeaconController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BeaconController.class);

    @Autowired
    @Qualifier("dadjf5a027tja9.BeaconService")
    private BeaconService beaconService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Beacon instances matching the search criteria.")
    public Page<Beacon> findBeacons(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Beacons list");
        return beaconService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Beacon instances.")
    public Page<Beacon> getBeacons(Pageable pageable) {
        LOGGER.debug("Rendering Beacons list");
        return beaconService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Beacon instance associated with the given id.")
    public Beacon getBeacon(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting Beacon with id: {}", id);
        Beacon instance = beaconService.findById(id);
        LOGGER.debug("Beacon details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Beacon instance associated with the given id.")
    public boolean deleteBeacon(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Beacon with id: {}", id);
        Beacon deleted = beaconService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Beacon instance associated with the given id.")
    public Beacon editBeacon(@PathVariable("id") String id, @RequestBody Beacon instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Beacon with id: {}", instance.getBeaconId());
        instance.setBeaconId(id);
        instance = beaconService.update(instance);
        LOGGER.debug("Beacon details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @ApiOperation(value = "Creates a new Beacon instance.")
    public Beacon createBeacon(@RequestBody Beacon instance) {
        LOGGER.debug("Create Beacon with information: {}", instance);
        instance = beaconService.create(instance);
        LOGGER.debug("Created Beacon with information: {}", instance);
        return instance;
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setBeaconService(BeaconService service) {
        this.beaconService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Beacon instances.")
    public Long countAllBeacons() {
        LOGGER.debug("counting Beacons");
        Long count = beaconService.countAll();
        return count;
    }
}
