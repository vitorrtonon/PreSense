/*Copyright (c) 2015-2016 presense@presense.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with presense@presense.com*/

package com.presense.dadjf5a027tja9.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.presense.dadjf5a027tja9.service.AttendanceService;
import com.presense.dadjf5a027tja9.service.EventService;
import com.presense.dadjf5a027tja9.service.EventmanagerService;
import com.presense.dadjf5a027tja9.service.PersoneventService;
import com.presense.dadjf5a027tja9.service.SensorService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;
import com.presense.dadjf5a027tja9.*;
import com.presense.dadjf5a027tja9.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Event.
 * @see com.presense.dadjf5a027tja9.Event
 */
@RestController(value = "Dadjf5a027tja9.EventController")
@RequestMapping("/dadjf5a027tja9/Event")
@Api(description = "Exposes APIs to work with Event resource.", value = "EventController")
public class EventController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EventController.class);

    @Autowired
    @Qualifier("dadjf5a027tja9.EventService")
    private EventService eventService;

    @Autowired
    @Qualifier("dadjf5a027tja9.EventmanagerService")
    private EventmanagerService eventmanagerService;

    @Autowired
    @Qualifier("dadjf5a027tja9.PersoneventService")
    private PersoneventService personeventService;

    @Autowired
    @Qualifier("dadjf5a027tja9.SensorService")
    private SensorService sensorService;

    @Autowired
    @Qualifier("dadjf5a027tja9.AttendanceService")
    private AttendanceService attendanceService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Event instances matching the search criteria.")
    public Page<Event> findEvents(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Events list");
        return eventService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Event instances.")
    public Page<Event> getEvents(Pageable pageable) {
        LOGGER.debug("Rendering Events list");
        return eventService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Event instance associated with the given id.")
    public Event getEvent(@PathVariable("id") long id) throws EntityNotFoundException {
        LOGGER.debug("Getting Event with id: {}", id);
        Event instance = eventService.findById(id);
        LOGGER.debug("Event details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Event instance associated with the given id.")
    public boolean deleteEvent(@PathVariable("id") long id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Event with id: {}", id);
        Event deleted = eventService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Event instance associated with the given id.")
    public Event editEvent(@PathVariable("id") long id, @RequestBody Event instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Event with id: {}", instance.getEventId());
        instance.setEventId(id);
        instance = eventService.update(instance);
        LOGGER.debug("Event details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}/sensors", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the sensors instance associated with the given id.")
    public Page<Sensor> findAssociatedsensors(Pageable pageable, @PathVariable("id") long id) {
        LOGGER.debug("Fetching all associated sensors");
        return sensorService.findAssociatedValues(id, "event", "eventId", pageable);
    }

    @RequestMapping(value = "/{id:.+}/attendances", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the attendances instance associated with the given id.")
    public Page<Attendance> findAssociatedattendances(Pageable pageable, @PathVariable("id") long id) {
        LOGGER.debug("Fetching all associated attendances");
        return attendanceService.findAssociatedValues(id, "event", "eventId", pageable);
    }

    @RequestMapping(value = "/{id:.+}/eventmanagers", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the eventmanagers instance associated with the given id.")
    public Page<Eventmanager> findAssociatedeventmanagers(Pageable pageable, @PathVariable("id") long id) {
        LOGGER.debug("Fetching all associated eventmanagers");
        return eventmanagerService.findAssociatedValues(id, "event", "eventId", pageable);
    }

    @RequestMapping(value = "/{id:.+}/personevents", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the personevents instance associated with the given id.")
    public Page<Personevent> findAssociatedpersonevents(Pageable pageable, @PathVariable("id") long id) {
        LOGGER.debug("Fetching all associated personevents");
        return personeventService.findAssociatedValues(id, "event", "eventId", pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @ApiOperation(value = "Creates a new Event instance.")
    public Event createEvent(@RequestBody Event instance) {
        LOGGER.debug("Create Event with information: {}", instance);
        instance = eventService.create(instance);
        LOGGER.debug("Created Event with information: {}", instance);
        return instance;
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setEventService(EventService service) {
        this.eventService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Event instances.")
    public Long countAllEvents() {
        LOGGER.debug("counting Events");
        Long count = eventService.countAll();
        return count;
    }
}
