/*Copyright (c) 2015-2016 presense@presense.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with presense@presense.com*/

package com.presense.dadjf5a027tja9.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.presense.dadjf5a027tja9.service.EventmanagerService;
import org.springframework.web.bind.annotation.RequestBody;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;
import com.presense.dadjf5a027tja9.*;
import com.presense.dadjf5a027tja9.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Eventmanager.
 * @see com.presense.dadjf5a027tja9.Eventmanager
 */
@RestController(value = "Dadjf5a027tja9.EventmanagerController")
@RequestMapping("/dadjf5a027tja9/Eventmanager")
@Api(description = "Exposes APIs to work with Eventmanager resource.", value = "EventmanagerController")
public class EventmanagerController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EventmanagerController.class);

    @Autowired
    @Qualifier("dadjf5a027tja9.EventmanagerService")
    private EventmanagerService eventmanagerService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Eventmanager instances matching the search criteria.")
    public Page<Eventmanager> findEventmanagers(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Eventmanagers list");
        return eventmanagerService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Eventmanager instances.")
    public Page<Eventmanager> getEventmanagers(Pageable pageable) {
        LOGGER.debug("Rendering Eventmanagers list");
        return eventmanagerService.findAll(pageable);
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Eventmanager instance associated with the given composite-id.")
    public Eventmanager getEventmanager(@RequestParam("eventId") long eventId, @RequestParam("managerId") String managerId) throws EntityNotFoundException {
        EventmanagerId temp = new EventmanagerId();
        temp.setEventId(eventId);
        temp.setManagerId(managerId);
        LOGGER.debug("Getting Eventmanager with id: {}", temp);
        Eventmanager instance = eventmanagerService.findById(temp);
        LOGGER.debug("Eventmanager details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Eventmanager instance associated with the given composite-id.")
    public boolean deleteEventmanager(@RequestParam("eventId") long eventId, @RequestParam("managerId") String managerId) throws EntityNotFoundException {
        EventmanagerId temp = new EventmanagerId();
        temp.setEventId(eventId);
        temp.setManagerId(managerId);
        LOGGER.debug("Deleting Eventmanager with id: {}", temp);
        Eventmanager deleted = eventmanagerService.delete(temp);
        return deleted != null;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Eventmanager instance associated with the given composite-id.")
    public Eventmanager editEventmanager(@RequestParam("eventId") long eventId, @RequestParam("managerId") String managerId, @RequestBody Eventmanager instance) throws EntityNotFoundException {
        EventmanagerId temp = new EventmanagerId();
        temp.setEventId(eventId);
        temp.setManagerId(managerId);
        eventmanagerService.delete(temp);
        instance = eventmanagerService.create(instance);
        LOGGER.debug("Eventmanager details with id is updated: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @ApiOperation(value = "Creates a new Eventmanager instance.")
    public Eventmanager createEventmanager(@RequestBody Eventmanager instance) {
        LOGGER.debug("Create Eventmanager with information: {}", instance);
        instance = eventmanagerService.create(instance);
        LOGGER.debug("Created Eventmanager with information: {}", instance);
        return instance;
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setEventmanagerService(EventmanagerService service) {
        this.eventmanagerService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Eventmanager instances.")
    public Long countAllEventmanagers() {
        LOGGER.debug("counting Eventmanagers");
        Long count = eventmanagerService.countAll();
        return count;
    }
}
