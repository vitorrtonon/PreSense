/*Copyright (c) 2015-2016 presense@presense.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with presense@presense.com*/

package com.presense.dadjf5a027tja9.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.presense.dadjf5a027tja9.service.EventmanagerService;
import com.presense.dadjf5a027tja9.service.ManagerService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;
import com.presense.dadjf5a027tja9.*;
import com.presense.dadjf5a027tja9.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Manager.
 * @see com.presense.dadjf5a027tja9.Manager
 */
@RestController(value = "Dadjf5a027tja9.ManagerController")
@RequestMapping("/dadjf5a027tja9/Manager")
@Api(description = "Exposes APIs to work with Manager resource.", value = "ManagerController")
public class ManagerController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ManagerController.class);

    @Autowired
    @Qualifier("dadjf5a027tja9.ManagerService")
    private ManagerService managerService;

    @Autowired
    @Qualifier("dadjf5a027tja9.EventmanagerService")
    private EventmanagerService eventmanagerService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Manager instances matching the search criteria.")
    public Page<Manager> findManagers(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Managers list");
        return managerService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Manager instances.")
    public Page<Manager> getManagers(Pageable pageable) {
        LOGGER.debug("Rendering Managers list");
        return managerService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Manager instance associated with the given id.")
    public Manager getManager(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting Manager with id: {}", id);
        Manager instance = managerService.findById(id);
        LOGGER.debug("Manager details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Manager instance associated with the given id.")
    public boolean deleteManager(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Manager with id: {}", id);
        Manager deleted = managerService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Manager instance associated with the given id.")
    public Manager editManager(@PathVariable("id") String id, @RequestBody Manager instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Manager with id: {}", instance.getUsername());
        instance.setUsername(id);
        instance = managerService.update(instance);
        LOGGER.debug("Manager details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}/eventmanagers", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the eventmanagers instance associated with the given id.")
    public Page<Eventmanager> findAssociatedeventmanagers(Pageable pageable, @PathVariable("id") String id) {
        LOGGER.debug("Fetching all associated eventmanagers");
        return eventmanagerService.findAssociatedValues(id, "manager", "username", pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @ApiOperation(value = "Creates a new Manager instance.")
    public Manager createManager(@RequestBody Manager instance) {
        LOGGER.debug("Create Manager with information: {}", instance);
        instance = managerService.create(instance);
        LOGGER.debug("Created Manager with information: {}", instance);
        return instance;
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setManagerService(ManagerService service) {
        this.managerService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Manager instances.")
    public Long countAllManagers() {
        LOGGER.debug("counting Managers");
        Long count = managerService.countAll();
        return count;
    }
}
