/*Copyright (c) 2015-2016 presense@presense.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with presense@presense.com*/

package com.presense.dadjf5a027tja9.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.presense.dadjf5a027tja9.service.SensorService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;
import com.presense.dadjf5a027tja9.*;
import com.presense.dadjf5a027tja9.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Sensor.
 * @see com.presense.dadjf5a027tja9.Sensor
 */
@RestController(value = "Dadjf5a027tja9.SensorController")
@RequestMapping("/dadjf5a027tja9/Sensor")
@Api(description = "Exposes APIs to work with Sensor resource.", value = "SensorController")
public class SensorController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SensorController.class);

    @Autowired
    @Qualifier("dadjf5a027tja9.SensorService")
    private SensorService sensorService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Sensor instances matching the search criteria.")
    public Page<Sensor> findSensors(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Sensors list");
        return sensorService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Sensor instances.")
    public Page<Sensor> getSensors(Pageable pageable) {
        LOGGER.debug("Rendering Sensors list");
        return sensorService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Sensor instance associated with the given id.")
    public Sensor getSensor(@PathVariable("id") long id) throws EntityNotFoundException {
        LOGGER.debug("Getting Sensor with id: {}", id);
        Sensor instance = sensorService.findById(id);
        LOGGER.debug("Sensor details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Sensor instance associated with the given id.")
    public boolean deleteSensor(@PathVariable("id") long id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Sensor with id: {}", id);
        Sensor deleted = sensorService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Sensor instance associated with the given id.")
    public Sensor editSensor(@PathVariable("id") long id, @RequestBody Sensor instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Sensor with id: {}", instance.getSensorId());
        instance.setSensorId(id);
        instance = sensorService.update(instance);
        LOGGER.debug("Sensor details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @ApiOperation(value = "Creates a new Sensor instance.")
    public Sensor createSensor(@RequestBody Sensor instance) {
        LOGGER.debug("Create Sensor with information: {}", instance);
        instance = sensorService.create(instance);
        LOGGER.debug("Created Sensor with information: {}", instance);
        return instance;
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setSensorService(SensorService service) {
        this.sensorService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Sensor instances.")
    public Long countAllSensors() {
        LOGGER.debug("counting Sensors");
        Long count = sensorService.countAll();
        return count;
    }
}
