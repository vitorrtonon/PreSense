/*Copyright (c) 2015-2016 presense@presense.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with presense@presense.com*/

package com.presense.dadjf5a027tja9.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.presense.dadjf5a027tja9.*;

/**
 * Service object for domain model class Attendance.
 * @see com.presense.dadjf5a027tja9.Attendance
 */

public interface AttendanceService {
   /**
	 * Creates a new attendance.
	 * 
	 * @param created
	 *            The information of the created attendance.
	 * @return The created attendance.
	 */
	public Attendance create(Attendance created);

	/**
	 * Deletes a attendance.
	 * 
	 * @param attendanceId
	 *            The id of the deleted attendance.
	 * @return The deleted attendance.
	 * @throws EntityNotFoundException
	 *             if no attendance is found with the given id.
	 */
	public Attendance delete(long attendanceId) throws EntityNotFoundException;

	/**
	 * Finds all attendances.
	 * 
	 * @return A list of attendances.
	 */
	public Page<Attendance> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Attendance> findAll(Pageable pageable);
	
	/**
	 * Finds attendance by id.
	 * 
	 * @param id
	 *            The id of the wanted attendance.
	 * @return The found attendance. If no attendance is found, this method returns
	 *         null.
	 */
	public Attendance findById(long id) throws EntityNotFoundException;
	/**
	 * Updates the information of a attendance.
	 * 
	 * @param updated
	 *            The information of the updated attendance.
	 * @return The updated attendance.
	 * @throws EntityNotFoundException
	 *             if no attendance is found with given id.
	 */
	public Attendance update(Attendance updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the attendances in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the attendance.
	 */

	public long countAll();


    public Page<Attendance> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

