/*Copyright (c) 2015-2016 presense@presense.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with presense@presense.com*/

package com.presense.dadjf5a027tja9.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.presense.dadjf5a027tja9.*;


/**
 * ServiceImpl object for domain model class Attendance.
 * @see com.presense.dadjf5a027tja9.Attendance
 */
@Service("dadjf5a027tja9.AttendanceService")
public class AttendanceServiceImpl implements AttendanceService {


    private static final Logger LOGGER = LoggerFactory.getLogger(AttendanceServiceImpl.class);

    @Autowired
    @Qualifier("dadjf5a027tja9.AttendanceDao")
    private WMGenericDao<Attendance, Long> wmGenericDao;
    public void setWMGenericDao(WMGenericDao<Attendance, Long> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
     public Page<Attendance> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "dadjf5a027tja9TransactionManager")
    @Override
    public Attendance create(Attendance attendance) {
        LOGGER.debug("Creating a new attendance with information: {}" , attendance);
        return this.wmGenericDao.create(attendance);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Attendance delete(long attendanceId) throws EntityNotFoundException {
        LOGGER.debug("Deleting attendance with id: {}" , attendanceId);
        Attendance deleted = this.wmGenericDao.findById(attendanceId);
        if (deleted == null) {
            LOGGER.debug("No attendance found with id: {}" , attendanceId);
            throw new EntityNotFoundException(String.valueOf(attendanceId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Page<Attendance> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all attendances");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Page<Attendance> findAll(Pageable pageable) {
        LOGGER.debug("Finding all attendances");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Attendance findById(long id) throws EntityNotFoundException {
        LOGGER.debug("Finding attendance by id: {}" , id);
        Attendance attendance=this.wmGenericDao.findById(id);
        if(attendance==null){
            LOGGER.debug("No attendance found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return attendance;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Attendance update(Attendance updated) throws EntityNotFoundException {
        LOGGER.debug("Updating attendance with information: {}" , updated);
        this.wmGenericDao.update(updated);
        return this.wmGenericDao.findById((long)updated.getAttendanceId());
    }

    @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


