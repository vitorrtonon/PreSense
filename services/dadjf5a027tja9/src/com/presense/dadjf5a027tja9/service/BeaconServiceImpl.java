/*Copyright (c) 2015-2016 presense@presense.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with presense@presense.com*/

package com.presense.dadjf5a027tja9.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.presense.dadjf5a027tja9.*;


/**
 * ServiceImpl object for domain model class Beacon.
 * @see com.presense.dadjf5a027tja9.Beacon
 */
@Service("dadjf5a027tja9.BeaconService")
public class BeaconServiceImpl implements BeaconService {


    private static final Logger LOGGER = LoggerFactory.getLogger(BeaconServiceImpl.class);

    @Autowired
    @Qualifier("dadjf5a027tja9.BeaconDao")
    private WMGenericDao<Beacon, String> wmGenericDao;
    public void setWMGenericDao(WMGenericDao<Beacon, String> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
     public Page<Beacon> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "dadjf5a027tja9TransactionManager")
    @Override
    public Beacon create(Beacon beacon) {
        LOGGER.debug("Creating a new beacon with information: {}" , beacon);
        return this.wmGenericDao.create(beacon);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Beacon delete(String beaconId) throws EntityNotFoundException {
        LOGGER.debug("Deleting beacon with id: {}" , beaconId);
        Beacon deleted = this.wmGenericDao.findById(beaconId);
        if (deleted == null) {
            LOGGER.debug("No beacon found with id: {}" , beaconId);
            throw new EntityNotFoundException(String.valueOf(beaconId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Page<Beacon> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all beacons");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Page<Beacon> findAll(Pageable pageable) {
        LOGGER.debug("Finding all beacons");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Beacon findById(String id) throws EntityNotFoundException {
        LOGGER.debug("Finding beacon by id: {}" , id);
        Beacon beacon=this.wmGenericDao.findById(id);
        if(beacon==null){
            LOGGER.debug("No beacon found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return beacon;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Beacon update(Beacon updated) throws EntityNotFoundException {
        LOGGER.debug("Updating beacon with information: {}" , updated);
        this.wmGenericDao.update(updated);
        return this.wmGenericDao.findById((String)updated.getBeaconId());
    }

    @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


