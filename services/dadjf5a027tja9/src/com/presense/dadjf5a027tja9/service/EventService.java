/*Copyright (c) 2015-2016 presense@presense.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with presense@presense.com*/

package com.presense.dadjf5a027tja9.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.presense.dadjf5a027tja9.*;

/**
 * Service object for domain model class Event.
 * @see com.presense.dadjf5a027tja9.Event
 */

public interface EventService {
   /**
	 * Creates a new event.
	 * 
	 * @param created
	 *            The information of the created event.
	 * @return The created event.
	 */
	public Event create(Event created);

	/**
	 * Deletes a event.
	 * 
	 * @param eventId
	 *            The id of the deleted event.
	 * @return The deleted event.
	 * @throws EntityNotFoundException
	 *             if no event is found with the given id.
	 */
	public Event delete(long eventId) throws EntityNotFoundException;

	/**
	 * Finds all events.
	 * 
	 * @return A list of events.
	 */
	public Page<Event> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Event> findAll(Pageable pageable);
	
	/**
	 * Finds event by id.
	 * 
	 * @param id
	 *            The id of the wanted event.
	 * @return The found event. If no event is found, this method returns
	 *         null.
	 */
	public Event findById(long id) throws EntityNotFoundException;
	/**
	 * Updates the information of a event.
	 * 
	 * @param updated
	 *            The information of the updated event.
	 * @return The updated event.
	 * @throws EntityNotFoundException
	 *             if no event is found with given id.
	 */
	public Event update(Event updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the events in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the event.
	 */

	public long countAll();


    public Page<Event> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

