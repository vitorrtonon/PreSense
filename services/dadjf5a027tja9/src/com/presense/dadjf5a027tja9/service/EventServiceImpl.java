/*Copyright (c) 2015-2016 presense@presense.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with presense@presense.com*/

package com.presense.dadjf5a027tja9.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.presense.dadjf5a027tja9.*;


/**
 * ServiceImpl object for domain model class Event.
 * @see com.presense.dadjf5a027tja9.Event
 */
@Service("dadjf5a027tja9.EventService")
public class EventServiceImpl implements EventService {


    private static final Logger LOGGER = LoggerFactory.getLogger(EventServiceImpl.class);

    @Autowired
    @Qualifier("dadjf5a027tja9.EventDao")
    private WMGenericDao<Event, Long> wmGenericDao;
    public void setWMGenericDao(WMGenericDao<Event, Long> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
     public Page<Event> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "dadjf5a027tja9TransactionManager")
    @Override
    public Event create(Event event) {
        LOGGER.debug("Creating a new event with information: {}" , event);
        return this.wmGenericDao.create(event);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Event delete(long eventId) throws EntityNotFoundException {
        LOGGER.debug("Deleting event with id: {}" , eventId);
        Event deleted = this.wmGenericDao.findById(eventId);
        if (deleted == null) {
            LOGGER.debug("No event found with id: {}" , eventId);
            throw new EntityNotFoundException(String.valueOf(eventId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Page<Event> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all events");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Page<Event> findAll(Pageable pageable) {
        LOGGER.debug("Finding all events");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Event findById(long id) throws EntityNotFoundException {
        LOGGER.debug("Finding event by id: {}" , id);
        Event event=this.wmGenericDao.findById(id);
        if(event==null){
            LOGGER.debug("No event found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return event;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Event update(Event updated) throws EntityNotFoundException {
        LOGGER.debug("Updating event with information: {}" , updated);
        this.wmGenericDao.update(updated);
        return this.wmGenericDao.findById((long)updated.getEventId());
    }

    @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


