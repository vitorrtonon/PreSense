/*Copyright (c) 2015-2016 presense@presense.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with presense@presense.com*/

package com.presense.dadjf5a027tja9.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.presense.dadjf5a027tja9.*;

/**
 * Service object for domain model class Eventmanager.
 * @see com.presense.dadjf5a027tja9.Eventmanager
 */

public interface EventmanagerService {
   /**
	 * Creates a new eventmanager.
	 * 
	 * @param created
	 *            The information of the created eventmanager.
	 * @return The created eventmanager.
	 */
	public Eventmanager create(Eventmanager created);

	/**
	 * Deletes a eventmanager.
	 * 
	 * @param eventmanagerId
	 *            The id of the deleted eventmanager.
	 * @return The deleted eventmanager.
	 * @throws EntityNotFoundException
	 *             if no eventmanager is found with the given id.
	 */
	public Eventmanager delete(EventmanagerId eventmanagerId) throws EntityNotFoundException;

	/**
	 * Finds all eventmanagers.
	 * 
	 * @return A list of eventmanagers.
	 */
	public Page<Eventmanager> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Eventmanager> findAll(Pageable pageable);
	
	/**
	 * Finds eventmanager by id.
	 * 
	 * @param id
	 *            The id of the wanted eventmanager.
	 * @return The found eventmanager. If no eventmanager is found, this method returns
	 *         null.
	 */
	public Eventmanager findById(EventmanagerId id) throws EntityNotFoundException;
	/**
	 * Updates the information of a eventmanager.
	 * 
	 * @param updated
	 *            The information of the updated eventmanager.
	 * @return The updated eventmanager.
	 * @throws EntityNotFoundException
	 *             if no eventmanager is found with given id.
	 */
	public Eventmanager update(Eventmanager updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the eventmanagers in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the eventmanager.
	 */

	public long countAll();


    public Page<Eventmanager> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

