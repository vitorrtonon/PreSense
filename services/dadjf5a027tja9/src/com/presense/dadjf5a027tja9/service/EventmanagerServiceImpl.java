/*Copyright (c) 2015-2016 presense@presense.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with presense@presense.com*/

package com.presense.dadjf5a027tja9.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.presense.dadjf5a027tja9.*;


/**
 * ServiceImpl object for domain model class Eventmanager.
 * @see com.presense.dadjf5a027tja9.Eventmanager
 */
@Service("dadjf5a027tja9.EventmanagerService")
public class EventmanagerServiceImpl implements EventmanagerService {


    private static final Logger LOGGER = LoggerFactory.getLogger(EventmanagerServiceImpl.class);

    @Autowired
    @Qualifier("dadjf5a027tja9.EventmanagerDao")
    private WMGenericDao<Eventmanager, EventmanagerId> wmGenericDao;
    public void setWMGenericDao(WMGenericDao<Eventmanager, EventmanagerId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
     public Page<Eventmanager> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "dadjf5a027tja9TransactionManager")
    @Override
    public Eventmanager create(Eventmanager eventmanager) {
        LOGGER.debug("Creating a new eventmanager with information: {}" , eventmanager);
        return this.wmGenericDao.create(eventmanager);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Eventmanager delete(EventmanagerId eventmanagerId) throws EntityNotFoundException {
        LOGGER.debug("Deleting eventmanager with id: {}" , eventmanagerId);
        Eventmanager deleted = this.wmGenericDao.findById(eventmanagerId);
        if (deleted == null) {
            LOGGER.debug("No eventmanager found with id: {}" , eventmanagerId);
            throw new EntityNotFoundException(String.valueOf(eventmanagerId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Page<Eventmanager> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all eventmanagers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Page<Eventmanager> findAll(Pageable pageable) {
        LOGGER.debug("Finding all eventmanagers");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Eventmanager findById(EventmanagerId id) throws EntityNotFoundException {
        LOGGER.debug("Finding eventmanager by id: {}" , id);
        Eventmanager eventmanager=this.wmGenericDao.findById(id);
        if(eventmanager==null){
            LOGGER.debug("No eventmanager found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return eventmanager;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Eventmanager update(Eventmanager updated) throws EntityNotFoundException {
        LOGGER.debug("Updating eventmanager with information: {}" , updated);
        this.wmGenericDao.update(updated);
        return this.wmGenericDao.findById((EventmanagerId)updated.getId());
    }

    @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


