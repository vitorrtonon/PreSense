/*Copyright (c) 2015-2016 presense@presense.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with presense@presense.com*/

package com.presense.dadjf5a027tja9.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.presense.dadjf5a027tja9.*;

/**
 * Service object for domain model class Manager.
 * @see com.presense.dadjf5a027tja9.Manager
 */

public interface ManagerService {
   /**
	 * Creates a new manager.
	 * 
	 * @param created
	 *            The information of the created manager.
	 * @return The created manager.
	 */
	public Manager create(Manager created);

	/**
	 * Deletes a manager.
	 * 
	 * @param managerId
	 *            The id of the deleted manager.
	 * @return The deleted manager.
	 * @throws EntityNotFoundException
	 *             if no manager is found with the given id.
	 */
	public Manager delete(String managerId) throws EntityNotFoundException;

	/**
	 * Finds all managers.
	 * 
	 * @return A list of managers.
	 */
	public Page<Manager> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Manager> findAll(Pageable pageable);
	
	/**
	 * Finds manager by id.
	 * 
	 * @param id
	 *            The id of the wanted manager.
	 * @return The found manager. If no manager is found, this method returns
	 *         null.
	 */
	public Manager findById(String id) throws EntityNotFoundException;
	/**
	 * Updates the information of a manager.
	 * 
	 * @param updated
	 *            The information of the updated manager.
	 * @return The updated manager.
	 * @throws EntityNotFoundException
	 *             if no manager is found with given id.
	 */
	public Manager update(Manager updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the managers in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the manager.
	 */

	public long countAll();


    public Page<Manager> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

