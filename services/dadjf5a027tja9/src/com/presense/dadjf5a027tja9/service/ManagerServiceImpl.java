/*Copyright (c) 2015-2016 presense@presense.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with presense@presense.com*/

package com.presense.dadjf5a027tja9.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.presense.dadjf5a027tja9.*;


/**
 * ServiceImpl object for domain model class Manager.
 * @see com.presense.dadjf5a027tja9.Manager
 */
@Service("dadjf5a027tja9.ManagerService")
public class ManagerServiceImpl implements ManagerService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ManagerServiceImpl.class);

    @Autowired
    @Qualifier("dadjf5a027tja9.ManagerDao")
    private WMGenericDao<Manager, String> wmGenericDao;
    public void setWMGenericDao(WMGenericDao<Manager, String> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
     public Page<Manager> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "dadjf5a027tja9TransactionManager")
    @Override
    public Manager create(Manager manager) {
        LOGGER.debug("Creating a new manager with information: {}" , manager);
        return this.wmGenericDao.create(manager);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Manager delete(String managerId) throws EntityNotFoundException {
        LOGGER.debug("Deleting manager with id: {}" , managerId);
        Manager deleted = this.wmGenericDao.findById(managerId);
        if (deleted == null) {
            LOGGER.debug("No manager found with id: {}" , managerId);
            throw new EntityNotFoundException(String.valueOf(managerId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Page<Manager> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all managers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Page<Manager> findAll(Pageable pageable) {
        LOGGER.debug("Finding all managers");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Manager findById(String id) throws EntityNotFoundException {
        LOGGER.debug("Finding manager by id: {}" , id);
        Manager manager=this.wmGenericDao.findById(id);
        if(manager==null){
            LOGGER.debug("No manager found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return manager;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Manager update(Manager updated) throws EntityNotFoundException {
        LOGGER.debug("Updating manager with information: {}" , updated);
        this.wmGenericDao.update(updated);
        return this.wmGenericDao.findById((String)updated.getUsername());
    }

    @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


