/*Copyright (c) 2015-2016 presense@presense.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with presense@presense.com*/

package com.presense.dadjf5a027tja9.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.presense.dadjf5a027tja9.*;

/**
 * Service object for domain model class Person.
 * @see com.presense.dadjf5a027tja9.Person
 */

public interface PersonService {
   /**
	 * Creates a new person.
	 * 
	 * @param created
	 *            The information of the created person.
	 * @return The created person.
	 */
	public Person create(Person created);

	/**
	 * Deletes a person.
	 * 
	 * @param personId
	 *            The id of the deleted person.
	 * @return The deleted person.
	 * @throws EntityNotFoundException
	 *             if no person is found with the given id.
	 */
	public Person delete(long personId) throws EntityNotFoundException;

	/**
	 * Finds all persons.
	 * 
	 * @return A list of persons.
	 */
	public Page<Person> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Person> findAll(Pageable pageable);
	
	/**
	 * Finds person by id.
	 * 
	 * @param id
	 *            The id of the wanted person.
	 * @return The found person. If no person is found, this method returns
	 *         null.
	 */
	public Person findById(long id) throws EntityNotFoundException;
	/**
	 * Updates the information of a person.
	 * 
	 * @param updated
	 *            The information of the updated person.
	 * @return The updated person.
	 * @throws EntityNotFoundException
	 *             if no person is found with given id.
	 */
	public Person update(Person updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the persons in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the person.
	 */

	public long countAll();


    public Page<Person> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

