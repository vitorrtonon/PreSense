/*Copyright (c) 2015-2016 presense@presense.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with presense@presense.com*/

package com.presense.dadjf5a027tja9.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.presense.dadjf5a027tja9.*;


/**
 * ServiceImpl object for domain model class Personevent.
 * @see com.presense.dadjf5a027tja9.Personevent
 */
@Service("dadjf5a027tja9.PersoneventService")
public class PersoneventServiceImpl implements PersoneventService {


    private static final Logger LOGGER = LoggerFactory.getLogger(PersoneventServiceImpl.class);

    @Autowired
    @Qualifier("dadjf5a027tja9.PersoneventDao")
    private WMGenericDao<Personevent, PersoneventId> wmGenericDao;
    public void setWMGenericDao(WMGenericDao<Personevent, PersoneventId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
     public Page<Personevent> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "dadjf5a027tja9TransactionManager")
    @Override
    public Personevent create(Personevent personevent) {
        LOGGER.debug("Creating a new personevent with information: {}" , personevent);
        return this.wmGenericDao.create(personevent);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Personevent delete(PersoneventId personeventId) throws EntityNotFoundException {
        LOGGER.debug("Deleting personevent with id: {}" , personeventId);
        Personevent deleted = this.wmGenericDao.findById(personeventId);
        if (deleted == null) {
            LOGGER.debug("No personevent found with id: {}" , personeventId);
            throw new EntityNotFoundException(String.valueOf(personeventId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Page<Personevent> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all personevents");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Page<Personevent> findAll(Pageable pageable) {
        LOGGER.debug("Finding all personevents");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Personevent findById(PersoneventId id) throws EntityNotFoundException {
        LOGGER.debug("Finding personevent by id: {}" , id);
        Personevent personevent=this.wmGenericDao.findById(id);
        if(personevent==null){
            LOGGER.debug("No personevent found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return personevent;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Personevent update(Personevent updated) throws EntityNotFoundException {
        LOGGER.debug("Updating personevent with information: {}" , updated);
        this.wmGenericDao.update(updated);
        return this.wmGenericDao.findById((PersoneventId)updated.getId());
    }

    @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


