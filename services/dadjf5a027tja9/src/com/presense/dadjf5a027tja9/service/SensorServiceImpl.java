/*Copyright (c) 2015-2016 presense@presense.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with presense@presense.com*/

package com.presense.dadjf5a027tja9.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.presense.dadjf5a027tja9.*;


/**
 * ServiceImpl object for domain model class Sensor.
 * @see com.presense.dadjf5a027tja9.Sensor
 */
@Service("dadjf5a027tja9.SensorService")
public class SensorServiceImpl implements SensorService {


    private static final Logger LOGGER = LoggerFactory.getLogger(SensorServiceImpl.class);

    @Autowired
    @Qualifier("dadjf5a027tja9.SensorDao")
    private WMGenericDao<Sensor, Long> wmGenericDao;
    public void setWMGenericDao(WMGenericDao<Sensor, Long> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
     public Page<Sensor> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "dadjf5a027tja9TransactionManager")
    @Override
    public Sensor create(Sensor sensor) {
        LOGGER.debug("Creating a new sensor with information: {}" , sensor);
        return this.wmGenericDao.create(sensor);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Sensor delete(long sensorId) throws EntityNotFoundException {
        LOGGER.debug("Deleting sensor with id: {}" , sensorId);
        Sensor deleted = this.wmGenericDao.findById(sensorId);
        if (deleted == null) {
            LOGGER.debug("No sensor found with id: {}" , sensorId);
            throw new EntityNotFoundException(String.valueOf(sensorId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Page<Sensor> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all sensors");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Page<Sensor> findAll(Pageable pageable) {
        LOGGER.debug("Finding all sensors");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Sensor findById(long id) throws EntityNotFoundException {
        LOGGER.debug("Finding sensor by id: {}" , id);
        Sensor sensor=this.wmGenericDao.findById(id);
        if(sensor==null){
            LOGGER.debug("No sensor found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return sensor;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dadjf5a027tja9TransactionManager")
    @Override
    public Sensor update(Sensor updated) throws EntityNotFoundException {
        LOGGER.debug("Updating sensor with information: {}" , updated);
        this.wmGenericDao.update(updated);
        return this.wmGenericDao.findById((long)updated.getSensorId());
    }

    @Transactional(readOnly = true, value = "dadjf5a027tja9TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


